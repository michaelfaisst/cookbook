// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Recipe        Recipe[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Recipe {
    id          String  @id @default(cuid())
    name        String
    description String? @db.Text
    imageId     String?
    image       String?
    prepTime    Int
    cookTime    Int
    chillTime   Int
    totalTime   Int
    servings    Int

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId String

    tags         Tag[]
    ingredients  RecipeIngredient[]
    instructions RecipeInstruction[]

    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@index([categoryId])
    @@index([createdById])

    @@fulltext([name, description])
}

model RecipeIngredient {
    id String @id @default(cuid())

    amount Float?

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String

    ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
    ingredientId String
    unit         Unit?      @relation(fields: [unitId], references: [id])
    unitId       String?

    @@index([recipeId])
    @@index([ingredientId])
    @@index([unitId])
}

model Ingredient {
    id    String  @id @default(cuid())
    name  String
    image String?

    RecipeIngredient RecipeIngredient[]
}

model Unit {
    id   String @id @default(cuid())
    name String

    RecipeIngredient RecipeIngredient[]
}

model RecipeInstruction {
    id String @id @default(cuid())

    instruction String  @db.Text
    image       String?

    recipe   Recipe @relation(fields: [recipeId], references: [id])
    recipeId String

    @@index([recipeId])
}

model Category {
    id   String @id @default(cuid())
    name String

    recipes Recipe[]
}

model Tag {
    id   String @id @default(cuid())
    name String

    recipes Recipe[]
}
